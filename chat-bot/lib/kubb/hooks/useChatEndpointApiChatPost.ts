/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/authorized-client";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/authorized-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import type { ChatEndpointApiChatPostMutationRequest, ChatEndpointApiChatPostMutationResponse, ChatEndpointApiChatPostQueryParams, ChatEndpointApiChatPost422 } from "../types/ChatEndpointApiChatPost";
import { useMutation } from "@tanstack/react-query";

export const chatEndpointApiChatPostMutationKey = () => [{ url: '/api/chat' }] as const

export type ChatEndpointApiChatPostMutationKey = ReturnType<typeof chatEndpointApiChatPostMutationKey>

/**
 * @description Chat with the LLM using context from the most recent uploaded PDF.
 * @summary Chat Endpoint
 * {@link /api/chat}
 */
export async function chatEndpointApiChatPost(data: ChatEndpointApiChatPostMutationRequest, params: ChatEndpointApiChatPostQueryParams, config: Partial<RequestConfig<ChatEndpointApiChatPostMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<ChatEndpointApiChatPostMutationResponse, ResponseErrorConfig<ChatEndpointApiChatPost422>, ChatEndpointApiChatPostMutationRequest>({ method : "POST", url : `/api/chat`, params, data : requestData, ... requestConfig })  
  return res.data
}

/**
 * @description Chat with the LLM using context from the most recent uploaded PDF.
 * @summary Chat Endpoint
 * {@link /api/chat}
 */
export function useChatEndpointApiChatPost<TContext>(options: 
{
  mutation?: UseMutationOptions<ChatEndpointApiChatPostMutationResponse, ResponseErrorConfig<ChatEndpointApiChatPost422>, {data: ChatEndpointApiChatPostMutationRequest, params: ChatEndpointApiChatPostQueryParams}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<ChatEndpointApiChatPostMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? chatEndpointApiChatPostMutationKey()

  return useMutation<ChatEndpointApiChatPostMutationResponse, ResponseErrorConfig<ChatEndpointApiChatPost422>, {data: ChatEndpointApiChatPostMutationRequest, params: ChatEndpointApiChatPostQueryParams}, TContext>({
    mutationFn: async({ data, params }) => {
      return chatEndpointApiChatPost(data, params, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}