/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/authorized-client";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/authorized-client";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import type { GetConfigApiConfigGetQueryResponse } from "../types/GetConfigApiConfigGet";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const getConfigApiConfigGetQueryKey = () => [{ url: '/api/config' }] as const

export type GetConfigApiConfigGetQueryKey = ReturnType<typeof getConfigApiConfigGetQueryKey>

/**
 * @summary Get Config
 * {@link /api/config}
 */
export async function getConfigApiConfigGet(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<GetConfigApiConfigGetQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/api/config`, ... requestConfig })  
  return res.data
}

export function getConfigApiConfigGetQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getConfigApiConfigGetQueryKey()
  return queryOptions<GetConfigApiConfigGetQueryResponse, ResponseErrorConfig<Error>, GetConfigApiConfigGetQueryResponse, typeof queryKey>({
 
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return getConfigApiConfigGet(config)
   },
  })
}

/**
 * @summary Get Config
 * {@link /api/config}
 */
export function useGetConfigApiConfigGet<TData = GetConfigApiConfigGetQueryResponse, TQueryData = GetConfigApiConfigGetQueryResponse, TQueryKey extends QueryKey = GetConfigApiConfigGetQueryKey>(options: 
{
  query?: Partial<QueryObserverOptions<GetConfigApiConfigGetQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getConfigApiConfigGetQueryKey()

  const query = useQuery({
   ...getConfigApiConfigGetQueryOptions(config),
   queryKey,
   ...queryOptions
  } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}