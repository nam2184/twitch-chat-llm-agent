/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@/lib/authorized-client";
import type { RequestConfig, ResponseErrorConfig } from "@/lib/authorized-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import type { UploadPdfApiUploadPdfPostMutationRequest, UploadPdfApiUploadPdfPostMutationResponse, UploadPdfApiUploadPdfPostQueryParams, UploadPdfApiUploadPdfPost422 } from "../types/UploadPdfApiUploadPdfPost";
import { useMutation } from "@tanstack/react-query";

export const uploadPdfApiUploadPdfPostMutationKey = () => [{ url: '/api/upload_pdf' }] as const

export type UploadPdfApiUploadPdfPostMutationKey = ReturnType<typeof uploadPdfApiUploadPdfPostMutationKey>

/**
 * @description Upload and process a PDF to build a user-specific retriever.
 * @summary Upload Pdf
 * {@link /api/upload_pdf}
 */
export async function uploadPdfApiUploadPdfPost(data: UploadPdfApiUploadPdfPostMutationRequest, params: UploadPdfApiUploadPdfPostQueryParams, config: Partial<RequestConfig<UploadPdfApiUploadPdfPostMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  const formData = new FormData()
  if (requestData) {
   Object.keys(requestData).forEach((key) => {
     const value = requestData[key as keyof typeof requestData];
     if (typeof value === 'string' || (value as unknown) instanceof Blob) {
       formData.append(key, value as unknown as string | Blob);
     }
   })
  }  
  const res = await request<UploadPdfApiUploadPdfPostMutationResponse, ResponseErrorConfig<UploadPdfApiUploadPdfPost422>, UploadPdfApiUploadPdfPostMutationRequest>({ method : "POST", url : `/api/upload_pdf`, params, data : formData, ... requestConfig, headers : { 'Content-Type': 'multipart/form-data', ...requestConfig.headers } })  
  return res.data
}

/**
 * @description Upload and process a PDF to build a user-specific retriever.
 * @summary Upload Pdf
 * {@link /api/upload_pdf}
 */
export function useUploadPdfApiUploadPdfPost<TContext>(options: 
{
  mutation?: UseMutationOptions<UploadPdfApiUploadPdfPostMutationResponse, ResponseErrorConfig<UploadPdfApiUploadPdfPost422>, {data: UploadPdfApiUploadPdfPostMutationRequest, params: UploadPdfApiUploadPdfPostQueryParams}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<UploadPdfApiUploadPdfPostMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? uploadPdfApiUploadPdfPostMutationKey()

  return useMutation<UploadPdfApiUploadPdfPostMutationResponse, ResponseErrorConfig<UploadPdfApiUploadPdfPost422>, {data: UploadPdfApiUploadPdfPostMutationRequest, params: UploadPdfApiUploadPdfPostQueryParams}, TContext>({
    mutationFn: async({ data, params }) => {
      return uploadPdfApiUploadPdfPost(data, params, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}